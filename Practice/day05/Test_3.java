class Test_3{
	public static void main(String[] args){
		//verse1
		int i=0;
		i++;
		System.out.println(i);//1
		//verse2
		int k=0;
		k=k++;
		System.out.println(k);//0
		//verse3
		int j=0;
		++j;
		System.out.println(j);//1
		//verse4
		int l=0;
		l=++l;
		System.out.println(l);//1
		
		System.out.println("------------------------------");
		
		test();
		
	}
	
	/* 
		根据输出结果我们可以看出，i++不参与赋值运算的时候与参与的时候输出的结果分别为1,0,是不一样的。
		而++j的两次输出则都是1。
		结合之前所学进行分析可知上述程序的运行过程如下：
		
		verse1:
		计算机在内存中开辟1号存储单元用来存储变量i，生成整数0，赋值给1号存储单元（此时i=0），1号存储单元的值+1（此时i=1），打印i的值为1。
		verse2:
		计算机在内存中开辟1号存储单元用来存储变量k，生成整数0，赋值给1号存储单元（此时k=0），将1号存储单元的值（0）加载到数据栈，
		1号存储单元的值+1（此时k=1），将数据栈栈顶的值（0）取出来赋值给1号存储单元（此时k=0），打印k的值为0。
		
		verse3:
		计算机在内存中开辟1号存储单元用来存储变量l，生成整数0，赋值给2号存储单元（此时l=0），2号存储单元的值+1（此时l=1），打印l的值为1。
		verse4:
		计算机在内存中开辟2号存储单元用来存储变量j，生成整数0，赋值给2号存储单元（此时j=0），2号存储单元的值+1（此时j=1），
		将2号存储单元的值（1）加载到数据栈，将数据栈栈顶的值（1）取出来赋值给2号存储单元（此时j=1）,打印j的值为1。
		
		结论：综上我们可以看出，i++和++i都是自增1，单独执行时没有区别，但涉及到赋值运算时，i++是先将变量i的值加载到数据栈再自增，
		++i是先自增再把已经变化了的i的值加载到数据栈，所以赋值运算后，等号左边的变量的值不同。因此，当涉及赋值运算时，我们应当
		注意区分i++和++i，然而独立执行而不涉及赋值时，两者并无明显区别。这一点我们可以从下方的代码运行结果完全一样得知。
		
	*/
	
	public static void test(){
		for(int i=0;i<3;i++){
			System.out.println(i);
		}
		
		for(int j=0;j<3;++j){
			System.out.println(j);
		}
	}
}//打印出的i和j的值完全一样